
gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000750  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008f8  080008f8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008f8  080008f8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080008f8  080008f8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008f8  080008f8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008f8  080008f8  000108f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008fc  080008fc  000108fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000001c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004203  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008c5  00000000  00000000  0002423b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000630  00000000  00000000  00024b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005c8  00000000  00000000  00025130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010a8f  00000000  00000000  000256f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004855  00000000  00000000  00036187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00061e27  00000000  00000000  0003a9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0009c803  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b1c  00000000  00000000  0009c854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000008 	.word	0x20000008
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080008e0 	.word	0x080008e0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	080008e0 	.word	0x080008e0

080001e8 <main>:
void _GPIO_Init(void);
void Timer_Init(void);
void delay(uint32_t u32msDelay);

int main(void) 
{		
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
		_GPIO_Init();
 80001ec:	f000 f836 	bl	800025c <_GPIO_Init>
		Timer_Init();
 80001f0:	f000 f86c 	bl	80002cc <Timer_Init>
		while (1) 
		{
				/* Software Debounce */
				if (GPIO_ReadInputDataBit(User_Button_Port, User_Button_Pin)) 
 80001f4:	4b17      	ldr	r3, [pc, #92]	; (8000254 <main+0x6c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2201      	movs	r2, #1
 80001fa:	b292      	uxth	r2, r2
 80001fc:	4611      	mov	r1, r2
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 fa38 	bl	8000674 <GPIO_ReadInputDataBit>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d0f4      	beq.n	80001f4 <main+0xc>
				{
						delay(50u);
 800020a:	2032      	movs	r0, #50	; 0x32
 800020c:	f000 f87a 	bl	8000304 <delay>
						if (GPIO_ReadInputDataBit(User_Button_Port, User_Button_Pin))
 8000210:	4b10      	ldr	r3, [pc, #64]	; (8000254 <main+0x6c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2201      	movs	r2, #1
 8000216:	b292      	uxth	r2, r2
 8000218:	4611      	mov	r1, r2
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fa2a 	bl	8000674 <GPIO_ReadInputDataBit>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d0e6      	beq.n	80001f4 <main+0xc>
						{
								while (GPIO_ReadInputDataBit(User_Button_Port, User_Button_Pin)) 
 8000226:	bf00      	nop
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <main+0x6c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2201      	movs	r2, #1
 800022e:	b292      	uxth	r2, r2
 8000230:	4611      	mov	r1, r2
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fa1e 	bl	8000674 <GPIO_ReadInputDataBit>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1f4      	bne.n	8000228 <main+0x40>
								{
								}
								GPIO_ToggleBits(LED_D12_Port, LED_D12_Pin);
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <main+0x70>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000246:	b292      	uxth	r2, r2
 8000248:	4611      	mov	r1, r2
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fa2c 	bl	80006a8 <GPIO_ToggleBits>
				if (GPIO_ReadInputDataBit(User_Button_Port, User_Button_Pin)) 
 8000250:	e7d0      	b.n	80001f4 <main+0xc>
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004
 8000258:	20000000 	.word	0x20000000

0800025c <_GPIO_Init>:
				}
		}
}

void _GPIO_Init(void) 
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
		/* GPIOD for built-in led and GPIOA for built-in user button */
		GPIO_InitTypeDef LED_D12_Init, User_Button_Init;
		/* GPIOD clock*/
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000262:	2101      	movs	r1, #1
 8000264:	2008      	movs	r0, #8
 8000266:	f000 fa31 	bl	80006cc <RCC_AHB1PeriphClockCmd>
		/* GPIOD config */
		LED_D12_Init.GPIO_Mode 			= GPIO_Mode_OUT;
 800026a:	2301      	movs	r3, #1
 800026c:	733b      	strb	r3, [r7, #12]
		LED_D12_Init.GPIO_OType 		= GPIO_OType_PP;
 800026e:	2300      	movs	r3, #0
 8000270:	73bb      	strb	r3, [r7, #14]
		LED_D12_Init.GPIO_Pin 			= LED_D12_Pin;
 8000272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000276:	60bb      	str	r3, [r7, #8]
		LED_D12_Init.GPIO_PuPd			= GPIO_PuPd_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	73fb      	strb	r3, [r7, #15]
		LED_D12_Init.GPIO_Speed 		= GPIO_High_Speed;
 800027c:	2303      	movs	r3, #3
 800027e:	737b      	strb	r3, [r7, #13]
	
		GPIO_Init(LED_D12_Port, &LED_D12_Init);
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <_GPIO_Init+0x68>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f107 0208 	add.w	r2, r7, #8
 8000288:	4611      	mov	r1, r2
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f963 	bl	8000556 <GPIO_Init>
		/* GPIOA clock*/
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	2001      	movs	r0, #1
 8000294:	f000 fa1a 	bl	80006cc <RCC_AHB1PeriphClockCmd>
		/* GPIOA config */
		User_Button_Init.GPIO_Mode 	= GPIO_Mode_IN;
 8000298:	2300      	movs	r3, #0
 800029a:	713b      	strb	r3, [r7, #4]
		User_Button_Init.GPIO_OType = GPIO_OType_PP;
 800029c:	2300      	movs	r3, #0
 800029e:	71bb      	strb	r3, [r7, #6]
		User_Button_Init.GPIO_Pin 	= User_Button_Pin;
 80002a0:	2301      	movs	r3, #1
 80002a2:	603b      	str	r3, [r7, #0]
		User_Button_Init.GPIO_PuPd	= GPIO_PuPd_NOPULL;
 80002a4:	2300      	movs	r3, #0
 80002a6:	71fb      	strb	r3, [r7, #7]
		User_Button_Init.GPIO_Speed = GPIO_High_Speed;
 80002a8:	2303      	movs	r3, #3
 80002aa:	717b      	strb	r3, [r7, #5]
	
		GPIO_Init(User_Button_Port, &User_Button_Init);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <_GPIO_Init+0x6c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	463a      	mov	r2, r7
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f94e 	bl	8000556 <GPIO_Init>
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000004 	.word	0x20000004

080002cc <Timer_Init>:

void Timer_Init(void) 
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
		/* Timer 6 for delay */
		TIM_TimeBaseInitTypeDef TIM6_Init;
		/* Timer 6 clock */
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);	
 80002d2:	2101      	movs	r1, #1
 80002d4:	2010      	movs	r0, #16
 80002d6:	f000 fa19 	bl	800070c <RCC_APB1PeriphClockCmd>
		/* Timer 6 config */
		TIM6_Init.TIM_Prescaler 		= 84u - 1u;
 80002da:	2353      	movs	r3, #83	; 0x53
 80002dc:	80bb      	strh	r3, [r7, #4]
		TIM6_Init.TIM_Period 				= 0xffff;
 80002de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e2:	60bb      	str	r3, [r7, #8]
		TIM_TimeBaseInit(TIM6, &TIM6_Init);
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4619      	mov	r1, r3
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <Timer_Init+0x34>)
 80002ea:	f000 fa2f 	bl	800074c <TIM_TimeBaseInit>
		TIM_Cmd(TIM6, ENABLE);
 80002ee:	2101      	movs	r1, #1
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <Timer_Init+0x34>)
 80002f2:	f000 fab1 	bl	8000858 <TIM_Cmd>
}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40001000 	.word	0x40001000

08000304 <delay>:

void delay(uint32_t u32msDelay) 
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
		while (u32msDelay) {
 800030c:	e00e      	b.n	800032c <delay+0x28>
				TIM_SetCounter(TIM6, 0u);
 800030e:	2100      	movs	r1, #0
 8000310:	480a      	ldr	r0, [pc, #40]	; (800033c <delay+0x38>)
 8000312:	f000 fa87 	bl	8000824 <TIM_SetCounter>
				while (TIM_GetCounter(TIM6) < 1000u) 
 8000316:	bf00      	nop
 8000318:	4808      	ldr	r0, [pc, #32]	; (800033c <delay+0x38>)
 800031a:	f000 fa91 	bl	8000840 <TIM_GetCounter>
 800031e:	4603      	mov	r3, r0
 8000320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000324:	d3f8      	bcc.n	8000318 <delay+0x14>
				{
						
				}
				-- u32msDelay;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3b01      	subs	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
		while (u32msDelay) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1ed      	bne.n	800030e <delay+0xa>
		}
}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40001000 	.word	0x40001000

08000340 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000352:	e7fe      	b.n	8000352 <HardFault_Handler+0x4>

08000354 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000358:	e7fe      	b.n	8000358 <MemManage_Handler+0x4>

0800035a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800035e:	e7fe      	b.n	800035e <BusFault_Handler+0x4>

08000360 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000364:	e7fe      	b.n	8000364 <UsageFault_Handler+0x4>

08000366 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  //TimingDelay_Decrement();
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
	...

080003a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <SystemInit+0x60>)
 80003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <SystemInit+0x60>)
 80003ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <SystemInit+0x64>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a12      	ldr	r2, [pc, #72]	; (8000404 <SystemInit+0x64>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <SystemInit+0x64>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <SystemInit+0x64>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <SystemInit+0x64>)
 80003cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <SystemInit+0x64>)
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <SystemInit+0x68>)
 80003da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <SystemInit+0x64>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a08      	ldr	r2, [pc, #32]	; (8000404 <SystemInit+0x64>)
 80003e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <SystemInit+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80003ee:	f000 f80d 	bl	800040c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003f2:	4b03      	ldr	r3, [pc, #12]	; (8000400 <SystemInit+0x60>)
 80003f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003f8:	609a      	str	r2, [r3, #8]
#endif
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	e000ed00 	.word	0xe000ed00
 8000404:	40023800 	.word	0x40023800
 8000408:	24003010 	.word	0x24003010

0800040c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	2300      	movs	r3, #0
 8000418:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800041a:	4b36      	ldr	r3, [pc, #216]	; (80004f4 <SetSysClock+0xe8>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a35      	ldr	r2, [pc, #212]	; (80004f4 <SetSysClock+0xe8>)
 8000420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000424:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000426:	4b33      	ldr	r3, [pc, #204]	; (80004f4 <SetSysClock+0xe8>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3301      	adds	r3, #1
 8000434:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d103      	bne.n	8000444 <SetSysClock+0x38>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000442:	d1f0      	bne.n	8000426 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000444:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <SetSysClock+0xe8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000450:	2301      	movs	r3, #1
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	e001      	b.n	800045a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000456:	2300      	movs	r3, #0
 8000458:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d142      	bne.n	80004e6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000460:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <SetSysClock+0xe8>)
 8000462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000464:	4a23      	ldr	r2, [pc, #140]	; (80004f4 <SetSysClock+0xe8>)
 8000466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800046c:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <SetSysClock+0xec>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <SetSysClock+0xec>)
 8000472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000476:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <SetSysClock+0xe8>)
 800047a:	4a1e      	ldr	r2, [pc, #120]	; (80004f4 <SetSysClock+0xe8>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <SetSysClock+0xe8>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <SetSysClock+0xe8>)
 8000486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800048a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <SetSysClock+0xe8>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	4a18      	ldr	r2, [pc, #96]	; (80004f4 <SetSysClock+0xe8>)
 8000492:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000496:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <SetSysClock+0xe8>)
 800049a:	4a18      	ldr	r2, [pc, #96]	; (80004fc <SetSysClock+0xf0>)
 800049c:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <SetSysClock+0xe8>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <SetSysClock+0xe8>)
 80004a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004a8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004aa:	bf00      	nop
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <SetSysClock+0xe8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f9      	beq.n	80004ac <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <SetSysClock+0xf4>)
 80004ba:	f240 7205 	movw	r2, #1797	; 0x705
 80004be:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <SetSysClock+0xe8>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <SetSysClock+0xe8>)
 80004c6:	f023 0303 	bic.w	r3, r3, #3
 80004ca:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <SetSysClock+0xe8>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <SetSysClock+0xe8>)
 80004d2:	f043 0302 	orr.w	r3, r3, #2
 80004d6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004d8:	bf00      	nop
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <SetSysClock+0xe8>)
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	f003 030c 	and.w	r3, r3, #12
 80004e2:	2b08      	cmp	r3, #8
 80004e4:	d1f9      	bne.n	80004da <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40023800 	.word	0x40023800
 80004f8:	40007000 	.word	0x40007000
 80004fc:	07405419 	.word	0x07405419
 8000500:	40023c00 	.word	0x40023c00

08000504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000506:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000508:	f7ff ff4a 	bl	80003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <LoopForever+0x6>)
  ldr r1, =_edata
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <LoopForever+0xe>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000514:	e002      	b.n	800051c <LoopCopyDataInit>

08000516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051a:	3304      	adds	r3, #4

0800051c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800051c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000520:	d3f9      	bcc.n	8000516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000524:	4c0a      	ldr	r4, [pc, #40]	; (8000550 <LoopForever+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000528:	e001      	b.n	800052e <LoopFillZerobss>

0800052a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800052c:	3204      	adds	r2, #4

0800052e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000530:	d3fb      	bcc.n	800052a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000532:	f000 f9b1 	bl	8000898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000536:	f7ff fe57 	bl	80001e8 <main>

0800053a <LoopForever>:

LoopForever:
  b LoopForever
 800053a:	e7fe      	b.n	800053a <LoopForever>
  ldr   r0, =_estack
 800053c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000548:	08000900 	.word	0x08000900
  ldr r2, =_sbss
 800054c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000550:	20000024 	.word	0x20000024

08000554 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC_IRQHandler>

08000556 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000556:	b480      	push	{r7}
 8000558:	b087      	sub	sp, #28
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	e076      	b.n	8000660 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000572:	2201      	movs	r2, #1
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	4013      	ands	r3, r2
 8000584:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	429a      	cmp	r2, r3
 800058c:	d165      	bne.n	800065a <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	2103      	movs	r1, #3
 8000598:	fa01 f303 	lsl.w	r3, r1, r3
 800059c:	43db      	mvns	r3, r3
 800059e:	401a      	ands	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	4619      	mov	r1, r3
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	fa01 f303 	lsl.w	r3, r1, r3
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d003      	beq.n	80005cc <GPIO_Init+0x76>
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d12e      	bne.n	800062a <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	2103      	movs	r1, #3
 80005d6:	fa01 f303 	lsl.w	r3, r1, r3
 80005da:	43db      	mvns	r3, r3
 80005dc:	401a      	ands	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	4619      	mov	r1, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	431a      	orrs	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	b29b      	uxth	r3, r3
 8000602:	4619      	mov	r1, r3
 8000604:	2301      	movs	r3, #1
 8000606:	408b      	lsls	r3, r1
 8000608:	43db      	mvns	r3, r3
 800060a:	401a      	ands	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	7992      	ldrb	r2, [r2, #6]
 8000618:	4611      	mov	r1, r2
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	b292      	uxth	r2, r2
 800061e:	fa01 f202 	lsl.w	r2, r1, r2
 8000622:	b292      	uxth	r2, r2
 8000624:	431a      	orrs	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68da      	ldr	r2, [r3, #12]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	b29b      	uxth	r3, r3
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	2103      	movs	r1, #3
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	401a      	ands	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68da      	ldr	r2, [r3, #12]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	79db      	ldrb	r3, [r3, #7]
 800064a:	4619      	mov	r1, r3
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	fa01 f303 	lsl.w	r3, r1, r3
 8000654:	431a      	orrs	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	3301      	adds	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	2b0f      	cmp	r3, #15
 8000664:	d985      	bls.n	8000572 <GPIO_Init+0x1c>
    }
  }
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	371c      	adds	r7, #28
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	691a      	ldr	r2, [r3, #16]
 8000688:	887b      	ldrh	r3, [r7, #2]
 800068a:	4013      	ands	r3, r2
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
 8000694:	e001      	b.n	800069a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	887b      	ldrh	r3, [r7, #2]
 80006ba:	405a      	eors	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	615a      	str	r2, [r3, #20]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e2:	4909      	ldr	r1, [pc, #36]	; (8000708 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006ea:	e006      	b.n	80006fa <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	43db      	mvns	r3, r3
 80006f4:	4904      	ldr	r1, [pc, #16]	; (8000708 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006f6:	4013      	ands	r3, r2
 80006f8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <RCC_APB1PeriphClockCmd+0x3c>)
 8000720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000722:	4909      	ldr	r1, [pc, #36]	; (8000748 <RCC_APB1PeriphClockCmd+0x3c>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4313      	orrs	r3, r2
 8000728:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800072a:	e006      	b.n	800073a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <RCC_APB1PeriphClockCmd+0x3c>)
 800072e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	43db      	mvns	r3, r3
 8000734:	4904      	ldr	r1, [pc, #16]	; (8000748 <RCC_APB1PeriphClockCmd+0x3c>)
 8000736:	4013      	ands	r3, r2
 8000738:	640b      	str	r3, [r1, #64]	; 0x40
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a29      	ldr	r2, [pc, #164]	; (8000808 <TIM_TimeBaseInit+0xbc>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d013      	beq.n	8000790 <TIM_TimeBaseInit+0x44>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a28      	ldr	r2, [pc, #160]	; (800080c <TIM_TimeBaseInit+0xc0>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d00f      	beq.n	8000790 <TIM_TimeBaseInit+0x44>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000776:	d00b      	beq.n	8000790 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a25      	ldr	r2, [pc, #148]	; (8000810 <TIM_TimeBaseInit+0xc4>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d007      	beq.n	8000790 <TIM_TimeBaseInit+0x44>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a24      	ldr	r2, [pc, #144]	; (8000814 <TIM_TimeBaseInit+0xc8>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d003      	beq.n	8000790 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <TIM_TimeBaseInit+0xcc>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d108      	bne.n	80007a2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000796:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	885a      	ldrh	r2, [r3, #2]
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	4313      	orrs	r3, r2
 80007a0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a1d      	ldr	r2, [pc, #116]	; (800081c <TIM_TimeBaseInit+0xd0>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d00c      	beq.n	80007c4 <TIM_TimeBaseInit+0x78>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <TIM_TimeBaseInit+0xd4>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d008      	beq.n	80007c4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80007b2:	89fb      	ldrh	r3, [r7, #14]
 80007b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007b8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	891a      	ldrh	r2, [r3, #8]
 80007be:	89fb      	ldrh	r3, [r7, #14]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	89fa      	ldrh	r2, [r7, #14]
 80007c8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	881a      	ldrh	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <TIM_TimeBaseInit+0xbc>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d003      	beq.n	80007ea <TIM_TimeBaseInit+0x9e>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a09      	ldr	r2, [pc, #36]	; (800080c <TIM_TimeBaseInit+0xc0>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d104      	bne.n	80007f4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	7a9b      	ldrb	r3, [r3, #10]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	829a      	strh	r2, [r3, #20]
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40010000 	.word	0x40010000
 800080c:	40010400 	.word	0x40010400
 8000810:	40000400 	.word	0x40000400
 8000814:	40000800 	.word	0x40000800
 8000818:	40000c00 	.word	0x40000c00
 800081c:	40001000 	.word	0x40001000
 8000820:	40001400 	.word	0x40001400

08000824 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d008      	beq.n	800087c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	b29a      	uxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800087a:	e007      	b.n	800088c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b29b      	uxth	r3, r3
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	b29a      	uxth	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	801a      	strh	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <__libc_init_array>:
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	4d0d      	ldr	r5, [pc, #52]	; (80008d0 <__libc_init_array+0x38>)
 800089c:	4c0d      	ldr	r4, [pc, #52]	; (80008d4 <__libc_init_array+0x3c>)
 800089e:	1b64      	subs	r4, r4, r5
 80008a0:	10a4      	asrs	r4, r4, #2
 80008a2:	2600      	movs	r6, #0
 80008a4:	42a6      	cmp	r6, r4
 80008a6:	d109      	bne.n	80008bc <__libc_init_array+0x24>
 80008a8:	4d0b      	ldr	r5, [pc, #44]	; (80008d8 <__libc_init_array+0x40>)
 80008aa:	4c0c      	ldr	r4, [pc, #48]	; (80008dc <__libc_init_array+0x44>)
 80008ac:	f000 f818 	bl	80008e0 <_init>
 80008b0:	1b64      	subs	r4, r4, r5
 80008b2:	10a4      	asrs	r4, r4, #2
 80008b4:	2600      	movs	r6, #0
 80008b6:	42a6      	cmp	r6, r4
 80008b8:	d105      	bne.n	80008c6 <__libc_init_array+0x2e>
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c0:	4798      	blx	r3
 80008c2:	3601      	adds	r6, #1
 80008c4:	e7ee      	b.n	80008a4 <__libc_init_array+0xc>
 80008c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ca:	4798      	blx	r3
 80008cc:	3601      	adds	r6, #1
 80008ce:	e7f2      	b.n	80008b6 <__libc_init_array+0x1e>
 80008d0:	080008f8 	.word	0x080008f8
 80008d4:	080008f8 	.word	0x080008f8
 80008d8:	080008f8 	.word	0x080008f8
 80008dc:	080008fc 	.word	0x080008fc

080008e0 <_init>:
 80008e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e2:	bf00      	nop
 80008e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008e6:	bc08      	pop	{r3}
 80008e8:	469e      	mov	lr, r3
 80008ea:	4770      	bx	lr

080008ec <_fini>:
 80008ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ee:	bf00      	nop
 80008f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f2:	bc08      	pop	{r3}
 80008f4:	469e      	mov	lr, r3
 80008f6:	4770      	bx	lr
