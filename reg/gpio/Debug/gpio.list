
gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000414  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005bc  080005c4  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005bc  080005bc  000105c4  2**0
                  CONTENTS
  4 .ARM          00000000  080005bc  080005bc  000105c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005bc  080005c4  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005bc  080005bc  000105bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c0  080005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000105c4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000105c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d4a  00000000  00000000  000105f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002b9  00000000  00000000  0001133e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f0  00000000  00000000  000115f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000b8  00000000  00000000  000116e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f3de  00000000  00000000  000117a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000186f  00000000  00000000  00020b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000603d5  00000000  00000000  000223ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000827c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000024c  00000000  00000000  00082814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080005a4 	.word	0x080005a4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080005a4 	.word	0x080005a4

080001e8 <main>:
void _GPIO_Init(void);
void Timer_Init(void);
void delay(uint32_t u32msDelay);

int main(void) 
{		
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	_GPIO_Init();
 80001ec:	f000 f824 	bl	8000238 <_GPIO_Init>
	Timer_Init();
 80001f0:	f000 f85a 	bl	80002a8 <Timer_Init>
	while (1)
	{
		/* Software Debounce */
		if (1u == (GPIOA->IDR & 1u))
 80001f4:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <main+0x48>)
 80001f6:	691b      	ldr	r3, [r3, #16]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d1f9      	bne.n	80001f4 <main+0xc>
		{
			delay(50u);
 8000200:	2032      	movs	r0, #50	; 0x32
 8000202:	f000 f881 	bl	8000308 <delay>
			if (1u == (GPIOA->IDR & 1u))
 8000206:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <main+0x48>)
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	2b01      	cmp	r3, #1
 8000210:	d1f0      	bne.n	80001f4 <main+0xc>
			{
				while (1u == (GPIOA->IDR & 1u))
 8000212:	bf00      	nop
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <main+0x48>)
 8000216:	691b      	ldr	r3, [r3, #16]
 8000218:	f003 0301 	and.w	r3, r3, #1
 800021c:	2b01      	cmp	r3, #1
 800021e:	d0f9      	beq.n	8000214 <main+0x2c>
				{
					/* waiting */
				}
				GPIOD->ODR ^= (1u << 12);
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <main+0x4c>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	4a03      	ldr	r2, [pc, #12]	; (8000234 <main+0x4c>)
 8000226:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800022a:	6153      	str	r3, [r2, #20]
		if (1u == (GPIOA->IDR & 1u))
 800022c:	e7e2      	b.n	80001f4 <main+0xc>
 800022e:	bf00      	nop
 8000230:	40020000 	.word	0x40020000
 8000234:	40020c00 	.word	0x40020c00

08000238 <_GPIO_Init>:
		}
	}
}

void _GPIO_Init(void) 
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	/* GPIOD for built-in led and GPIOA for built-in user button */
	/* GPIOD Clock */
	RCC->AHB1ENR 	|= 	(1u << 3);
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <_GPIO_Init+0x64>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000240:	4a16      	ldr	r2, [pc, #88]	; (800029c <_GPIO_Init+0x64>)
 8000242:	f043 0308 	orr.w	r3, r3, #8
 8000246:	6313      	str	r3, [r2, #48]	; 0x30
	/* GPIOD config */
	GPIOD->MODER 	&= 	~(3u << 24);
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <_GPIO_Init+0x68>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <_GPIO_Init+0x68>)
 800024e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000252:	6013      	str	r3, [r2, #0]
	GPIOD->MODER 	|= 	(1u << 24);
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <_GPIO_Init+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <_GPIO_Init+0x68>)
 800025a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800025e:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER	&= 	~(1u << 12);
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <_GPIO_Init+0x68>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <_GPIO_Init+0x68>)
 8000266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800026a:	6053      	str	r3, [r2, #4]
	/* GPIOA Clock */
	RCC->AHB1ENR 	|= 	(1u << 0);
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <_GPIO_Init+0x64>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a0a      	ldr	r2, [pc, #40]	; (800029c <_GPIO_Init+0x64>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6313      	str	r3, [r2, #48]	; 0x30
	/* GPIOA config */
	GPIOA->MODER 	&= 	~(3u << 0);
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <_GPIO_Init+0x6c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <_GPIO_Init+0x6c>)
 800027e:	f023 0303 	bic.w	r3, r3, #3
 8000282:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR 	&= 	~(3u << 0);
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <_GPIO_Init+0x6c>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <_GPIO_Init+0x6c>)
 800028a:	f023 0303 	bic.w	r3, r3, #3
 800028e:	60d3      	str	r3, [r2, #12]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020c00 	.word	0x40020c00
 80002a4:	40020000 	.word	0x40020000

080002a8 <Timer_Init>:

void Timer_Init(void) 
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	/* Timer 6 for delay */
	/* Timer 6 Clock */
	RCC->APB1ENR 	|= (1u << 4);
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <Timer_Init+0x58>)
 80002ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b0:	4a13      	ldr	r2, [pc, #76]	; (8000300 <Timer_Init+0x58>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6413      	str	r3, [r2, #64]	; 0x40
	/* Timer 6 config */
	TIM6->CR1 		|= 	(1u << 1);
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <Timer_Init+0x5c>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	4a11      	ldr	r2, [pc, #68]	; (8000304 <Timer_Init+0x5c>)
 80002c0:	f043 0302 	orr.w	r3, r3, #2
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	8013      	strh	r3, [r2, #0]
	TIM6->PSC 		= 	(84u - 1u);
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <Timer_Init+0x5c>)
 80002ca:	2253      	movs	r2, #83	; 0x53
 80002cc:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM6->CR1 		&= 	~(1u << 1);
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <Timer_Init+0x5c>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <Timer_Init+0x5c>)
 80002d6:	f023 0302 	bic.w	r3, r3, #2
 80002da:	b29b      	uxth	r3, r3
 80002dc:	8013      	strh	r3, [r2, #0]
	TIM6->EGR 		= 	(1u << 0);
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <Timer_Init+0x5c>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	829a      	strh	r2, [r3, #20]
	TIM6->CR1 		|= 	(1u << 0);
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <Timer_Init+0x5c>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	4a06      	ldr	r2, [pc, #24]	; (8000304 <Timer_Init+0x5c>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	8013      	strh	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023800 	.word	0x40023800
 8000304:	40001000 	.word	0x40001000

08000308 <delay>:

void delay(uint32_t u32msDelay) 
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	while (u32msDelay) {
 8000310:	e00b      	b.n	800032a <delay+0x22>
		TIM6->CNT = 0u;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <delay+0x38>)
 8000314:	2200      	movs	r2, #0
 8000316:	625a      	str	r2, [r3, #36]	; 0x24
		while (TIM6->CNT < 1000u)
 8000318:	bf00      	nop
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <delay+0x38>)
 800031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000322:	d3fa      	bcc.n	800031a <delay+0x12>
		{
				/* waiting */
		}
		-- u32msDelay;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3b01      	subs	r3, #1
 8000328:	607b      	str	r3, [r7, #4]
	while (u32msDelay) {
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d1f0      	bne.n	8000312 <delay+0xa>
	}
}
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40001000 	.word	0x40001000

08000344 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000356:	e7fe      	b.n	8000356 <HardFault_Handler+0x4>

08000358 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800035c:	e7fe      	b.n	800035c <MemManage_Handler+0x4>

0800035e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000362:	e7fe      	b.n	8000362 <BusFault_Handler+0x4>

08000364 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000368:	e7fe      	b.n	8000368 <UsageFault_Handler+0x4>

0800036a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  //TimingDelay_Decrement();
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <SystemInit+0x60>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <SystemInit+0x60>)
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SystemInit+0x64>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <SystemInit+0x64>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <SystemInit+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <SystemInit+0x64>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <SystemInit+0x64>)
 80003d0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SystemInit+0x64>)
 80003dc:	4a0b      	ldr	r2, [pc, #44]	; (800040c <SystemInit+0x68>)
 80003de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <SystemInit+0x64>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a08      	ldr	r2, [pc, #32]	; (8000408 <SystemInit+0x64>)
 80003e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SystemInit+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80003f2:	f000 f80d 	bl	8000410 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003f6:	4b03      	ldr	r3, [pc, #12]	; (8000404 <SystemInit+0x60>)
 80003f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003fc:	609a      	str	r2, [r3, #8]
#endif
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	40023800 	.word	0x40023800
 800040c:	24003010 	.word	0x24003010

08000410 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	2300      	movs	r3, #0
 800041c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800041e:	4b36      	ldr	r3, [pc, #216]	; (80004f8 <SetSysClock+0xe8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a35      	ldr	r2, [pc, #212]	; (80004f8 <SetSysClock+0xe8>)
 8000424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000428:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800042a:	4b33      	ldr	r3, [pc, #204]	; (80004f8 <SetSysClock+0xe8>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000432:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3301      	adds	r3, #1
 8000438:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d103      	bne.n	8000448 <SetSysClock+0x38>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000446:	d1f0      	bne.n	800042a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <SetSysClock+0xe8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d002      	beq.n	800045a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000454:	2301      	movs	r3, #1
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	e001      	b.n	800045e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800045a:	2300      	movs	r3, #0
 800045c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d142      	bne.n	80004ea <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000464:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <SetSysClock+0xe8>)
 8000466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000468:	4a23      	ldr	r2, [pc, #140]	; (80004f8 <SetSysClock+0xe8>)
 800046a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000470:	4b22      	ldr	r3, [pc, #136]	; (80004fc <SetSysClock+0xec>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a21      	ldr	r2, [pc, #132]	; (80004fc <SetSysClock+0xec>)
 8000476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800047a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <SetSysClock+0xe8>)
 800047e:	4a1e      	ldr	r2, [pc, #120]	; (80004f8 <SetSysClock+0xe8>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000484:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <SetSysClock+0xe8>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a1b      	ldr	r2, [pc, #108]	; (80004f8 <SetSysClock+0xe8>)
 800048a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800048e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <SetSysClock+0xe8>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a18      	ldr	r2, [pc, #96]	; (80004f8 <SetSysClock+0xe8>)
 8000496:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800049a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <SetSysClock+0xe8>)
 800049e:	4a18      	ldr	r2, [pc, #96]	; (8000500 <SetSysClock+0xf0>)
 80004a0:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <SetSysClock+0xe8>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a14      	ldr	r2, [pc, #80]	; (80004f8 <SetSysClock+0xe8>)
 80004a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ac:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004ae:	bf00      	nop
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <SetSysClock+0xe8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f9      	beq.n	80004b0 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <SetSysClock+0xf4>)
 80004be:	f240 7205 	movw	r2, #1797	; 0x705
 80004c2:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <SetSysClock+0xe8>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <SetSysClock+0xe8>)
 80004ca:	f023 0303 	bic.w	r3, r3, #3
 80004ce:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <SetSysClock+0xe8>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <SetSysClock+0xe8>)
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004dc:	bf00      	nop
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <SetSysClock+0xe8>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	f003 030c 	and.w	r3, r3, #12
 80004e6:	2b08      	cmp	r3, #8
 80004e8:	d1f9      	bne.n	80004de <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40007000 	.word	0x40007000
 8000500:	07405419 	.word	0x07405419
 8000504:	40023c00 	.word	0x40023c00

08000508 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800050c:	f7ff ff4a 	bl	80003a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 8000512:	490d      	ldr	r1, [pc, #52]	; (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <LoopForever+0xe>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000528:	4c0a      	ldr	r4, [pc, #40]	; (8000554 <LoopForever+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000536:	f000 f811 	bl	800055c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fe55 	bl	80001e8 <main>

0800053e <LoopForever>:

LoopForever:
  b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   r0, =_estack
 8000540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800054c:	080005c4 	.word	0x080005c4
  ldr r2, =_sbss
 8000550:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000554:	2000001c 	.word	0x2000001c

08000558 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC_IRQHandler>
	...

0800055c <__libc_init_array>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	4d0d      	ldr	r5, [pc, #52]	; (8000594 <__libc_init_array+0x38>)
 8000560:	4c0d      	ldr	r4, [pc, #52]	; (8000598 <__libc_init_array+0x3c>)
 8000562:	1b64      	subs	r4, r4, r5
 8000564:	10a4      	asrs	r4, r4, #2
 8000566:	2600      	movs	r6, #0
 8000568:	42a6      	cmp	r6, r4
 800056a:	d109      	bne.n	8000580 <__libc_init_array+0x24>
 800056c:	4d0b      	ldr	r5, [pc, #44]	; (800059c <__libc_init_array+0x40>)
 800056e:	4c0c      	ldr	r4, [pc, #48]	; (80005a0 <__libc_init_array+0x44>)
 8000570:	f000 f818 	bl	80005a4 <_init>
 8000574:	1b64      	subs	r4, r4, r5
 8000576:	10a4      	asrs	r4, r4, #2
 8000578:	2600      	movs	r6, #0
 800057a:	42a6      	cmp	r6, r4
 800057c:	d105      	bne.n	800058a <__libc_init_array+0x2e>
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	f855 3b04 	ldr.w	r3, [r5], #4
 8000584:	4798      	blx	r3
 8000586:	3601      	adds	r6, #1
 8000588:	e7ee      	b.n	8000568 <__libc_init_array+0xc>
 800058a:	f855 3b04 	ldr.w	r3, [r5], #4
 800058e:	4798      	blx	r3
 8000590:	3601      	adds	r6, #1
 8000592:	e7f2      	b.n	800057a <__libc_init_array+0x1e>
 8000594:	080005bc 	.word	0x080005bc
 8000598:	080005bc 	.word	0x080005bc
 800059c:	080005bc 	.word	0x080005bc
 80005a0:	080005c0 	.word	0x080005c0

080005a4 <_init>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	bf00      	nop
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr

080005b0 <_fini>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr
